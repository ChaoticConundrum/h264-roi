## LibChaos CMakeLists.txt
CMAKE_MINIMUM_REQUIRED(VERSION 3.2)

PROJECT(LibChaos)

# Options
INCLUDE(cmake/Options.cmake)
# Build Settings
INCLUDE(cmake/ConfigureBuild.cmake)
# CMake Utils
INCLUDE(cmake/Utils.cmake)

# Git Describe
EXECUTE_PROCESS(
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    COMMAND git describe --all --long --always --abbrev=8 --dirty=*
    OUTPUT_VARIABLE LIBCHAOS_DESCRIBE
    OUTPUT_STRIP_TRAILING_WHITESPACE
)
SET(LIBCHAOS_CXX_FLAGS "${LIBCHAOS_CXX_FLAGS} -D_LIBCHAOS_DESCRIBE=\\\"${LIBCHAOS_DESCRIBE}\\\"")

IF(LIBCHAOS_LINK_SHARED)
    SET(LIBCHAOS_LINK SHARED)
    SET(LIBCHAOS_LINK_STR "Shared")
ELSE()
    SET(LIBCHAOS_LINK STATIC)
    SET(LIBCHAOS_LINK_STR "Static")
ENDIF()

# Export Options
GET_DIRECTORY_PROPERTY(HAS_PARENT PARENT_DIRECTORY)
IF(HAS_PARENT)
    SET(LibChaos_COMPILER   ${LIBCHAOS_COMPILER}    PARENT_SCOPE)
    SET(LibChaos_PLATFORM   ${LIBCHAOS_PLATFORM}    PARENT_SCOPE)
    SET(LibChaos_BUILD      ${LIBCHAOS_BUILD}       PARENT_SCOPE)

    SET(COMPILER_GCC        ${COMPILER_GCC}         PARENT_SCOPE)
    SET(COMPILER_MINGW      ${COMPILER_MINGW}       PARENT_SCOPE)
    SET(COMPILER_MSVC       ${COMPILER_MSVC}        PARENT_SCOPE)
    SET(COMPILER_CLANG      ${COMPILER_CLANG}       PARENT_SCOPE)

    SET(PLATFORM_LINUX      ${PLATFORM_LINUX}       PARENT_SCOPE)
    SET(PLATFORM_FREEBSD    ${PLATFORM_FREEBSD}     PARENT_SCOPE)
    SET(PLATFORM_WINDOWS    ${PLATFORM_WINDOWS}     PARENT_SCOPE)
    SET(PLATFORM_MACOSX     ${PLATFORM_MACOSX}      PARENT_SCOPE)

    SET(LibChaos_CXX_FLAGS  ${LIBCHAOS_CXX_FLAGS}   PARENT_SCOPE)
ENDIF()

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${LIBCHAOS_CXX_FLAGS}")

# Readme Files
SET(LibChaos_OTHER_FILES
    doc/README.txt
    doc/Projects.txt
    doc/LibChaos_Todo_Ideas.txt
    doc/Doxyfile.in
    doc/Doxyfile-help.in
)

## Libraries

# LibChaos
ADD_SUBDIRECTORY(chaos)
SET(LibChaos_BUILD_LIST "Core")
SET(LibChaos_INCLUDE ${LibChaos_Core_INCLUDE})
SET(LibChaos_ALL_FILES ${LibChaos_Core_FILES})

# LibChaos Extern
IF(NOT LIBCHAOS_EXTERN)
    SET(LIBCHAOS_EXTERN_ALL EXCLUDE_FROM_ALL)
ENDIF()
ADD_SUBDIRECTORY(extern)
IF(LIBCHAOS_EXTERN)
    SET(LibChaos_BUILD_LIST ${LibChaos_BUILD_LIST} ${EXTERN_BUILD_LIST})
    SET(LibChaos_INCLUDE ${LibChaos_INCLUDE} ${LibChaos_Extern_INCLUDE})
ENDIF()

# Export Include Directories
IF(HAS_PARENT)
    SET(LibChaos_INCLUDE ${LibChaos_INCLUDE} PARENT_SCOPE)
ENDIF()

# LibChaos UI
IF(NOT LIBCHAOS_UI)
    SET(LIBCHAOS_UI_ALL EXCLUDE_FROM_ALL)
ENDIF()
ADD_SUBDIRECTORY(ui)
IF(LIBCHAOS_UI)
    SET(LibChaos_BUILD_LIST ${LibChaos_BUILD_LIST} "UI")
    IF(HAS_PARENT)
        SET(LibChaosUI_INCLUDE ${LibChaosUI_INCLUDE} PARENT_SCOPE)
    ENDIF()
ENDIF()

## Tools

# LibChaos Test
IF(NOT LIBCHAOS_TEST)
    SET(LIBCHAOS_TEST_ALL EXCLUDE_FROM_ALL)
ENDIF()
ADD_SUBDIRECTORY(test)
IF(LIBCHAOS_TEST)
    SET(LibChaos_BUILD_LIST ${LibChaos_BUILD_LIST} "Test")
ENDIF()

# LibChaos Utils
IF(NOT LIBCHAOS_UTIL)
    SET(LIBCHAOS_UTIL_ALL EXCLUDE_FROM_ALL)
ENDIF()
ADD_SUBDIRECTORY(utils)
IF(LIBCHAOS_UTIL)
    SET(LibChaos_BUILD_LIST ${LibChaos_BUILD_LIST} "Util")
ENDIF()

# ZParcel
IF(NOT LIBCHAOS_ZPARCEL)
    SET(LIBCHAOS_ZPARCEL_ALL EXCLUDE_FROM_ALL)
ENDIF()
ADD_SUBDIRECTORY(zparcel)
IF(LIBCHAOS_ZPARCEL)
    SET(LibChaos_BUILD_LIST ${LibChaos_BUILD_LIST} "ZParcel")
ENDIF()

# Doxygen
INCLUDE(cmake/Doxygen.cmake)

# Add All Sources to Dummy Target for IDE File Listing
GET_PROPERTY(LibChaosAllSources GLOBAL PROPERTY LibChaosAllSources)
ADD_CUSTOM_TARGET(dummy SOURCES
    ${LibChaosAllSources}
    ${LibChaos_OTHER_FILES}
)

# Build Status Line
STRING(REPLACE ";" "," LIBCHAOS_BUILD_LIST_STRING "${LibChaos_BUILD_LIST}")
MESSAGE(STATUS "LibChaos: ${CONFIGURE_BUILD_STRING} (${LIBCHAOS_LINK_STR}) - ${LIBCHAOS_BUILD_LIST_STRING} - ${LIBCHAOS_DESCRIBE}")
